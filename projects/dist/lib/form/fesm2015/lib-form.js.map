{"version":3,"file":"lib-form.js","sources":["ng://@lib/form/lib/form.service.ts","ng://@lib/form/lib/form.component.ts","ng://@lib/form/lib/form.module.ts","ng://@lib/form/lib/validators/validator.type.ts","ng://@lib/form/lib/validators/validators.ts","ng://@lib/form/lib/validators/validators-dict.ts","ng://@lib/form/lib/reactive/control.ts","ng://@lib/form/lib/reactive/reactive.ts","ng://@lib/form/lib/components/components.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-form',\r\n  template: `\r\n    <p>\r\n      form works!\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class FormComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormComponent } from './form.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormComponent,\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    FormComponent\r\n  ]\r\n})\r\nexport class FormModule { }\r\n","\r\nexport enum ValidatorType {\r\n    required = 'required',\r\n    maxLength = 'maxLength',\r\n    minLength = 'minLength',\r\n    max = 'max',\r\n    min = 'min',\r\n    email = 'email',\r\n    pattern = 'pattern',\r\n}","import { Validators } from \"@angular/forms\";\r\n\r\nexport class LibValidators extends Validators {\r\n    \r\n}","import { ValidatorType } from './validator.type';\r\nimport { Validators } from '@angular/forms';\r\n\r\nexport const ValidatorsDict = {\r\n    [ValidatorType.required]: Validators.required,\r\n    [ValidatorType.maxLength]: Validators.maxLength,\r\n    [ValidatorType.minLength]: Validators.minLength,\r\n    [ValidatorType.max]: Validators.max,\r\n    [ValidatorType.min]: Validators.min,\r\n    [ValidatorType.email]: Validators.email,\r\n    [ValidatorType.pattern]: Validators.pattern,\r\n}","import { FormControl, ValidatorFn, Validators } from '@angular/forms';\r\n\r\nimport { ValidatorType } from '../validators/validator.type';\r\n\r\nexport class LibFormControl extends FormControl {\r\n    private validators: {\r\n        [key: string]: ValidatorFn;\r\n    } = {};\r\n\r\n    private _keys: string[] = [];\r\n    private _validatorsCount = 0;\r\n    get appliedValidators(): string[] {\r\n        return this._keys;\r\n    }\r\n\r\n    isValidatorTypeApplied(type: ValidatorType | string) {\r\n        return this._keys.indexOf(type) !== -1;\r\n    }\r\n\r\n    private _convertValidatorsToArray(): ValidatorFn[] {\r\n        const validators:ValidatorFn[] = [];\r\n        for (const validator in this.validators) {\r\n            if (this.validators.hasOwnProperty(validator)) {\r\n                const element = this.validators[validator];\r\n                validators.push(element);\r\n            }\r\n        }\r\n        return validators;\r\n    }\r\n\r\n    private _updateValidators(added: boolean = false) {\r\n        if (added || this._validatorsCount !== this._keys.length) {\r\n            const validators = this._convertValidatorsToArray();\r\n            this.setValidators(validators);\r\n            this.updateValueAndValidity();\r\n        }\r\n    }\r\n\r\n    private _addValidatorTypes(type: ValidatorType | string) {\r\n        if (this._keys.indexOf(type) === -1) {\r\n            this._keys.push(type);\r\n            this._validatorsCount = this._keys.length;\r\n        }\r\n    }\r\n\r\n    private _removeValidatorType(type: ValidatorType | string) {\r\n        this._keys = this._keys.filter(_type => _type !== type);\r\n    }\r\n\r\n    addValidator(type: ValidatorType | string, validator: ValidatorFn) {\r\n        this.validators[type] = validator;\r\n        this._addValidatorTypes(type);\r\n        this._updateValidators(true);\r\n    }\r\n    \r\n    addValidators(validators: {type: ValidatorType | string, validator: ValidatorFn}[]) {\r\n        for (const validator of validators) {\r\n            this.validators[validator.type] = validator.validator;\r\n            this._addValidatorTypes(validator.type);\r\n        }\r\n        this._updateValidators(true);\r\n    }\r\n\r\n    setReadonly() {\r\n\r\n    }\r\n\r\n    setEditable() {\r\n\r\n    }\r\n\r\n    removeValidator(type: ValidatorType | string) {\r\n        delete this.validators[type];\r\n        this._removeValidatorType(type);\r\n        this._updateValidators();\r\n    }\r\n\r\n    removeValidators(types: ValidatorType[] | string[]) {\r\n        for (const type of types) {\r\n            delete this.validators[type];\r\n            this._removeValidatorType(type);\r\n        }\r\n        this._updateValidators();\r\n    }\r\n\r\n    clearValidators() {\r\n        this.validators = {};\r\n        super.clearValidators();\r\n    }\r\n}","import { FormGroup, AbstractControl, ValidatorFn, AbstractControlOptions, AsyncValidatorFn, AbstractControlDirective, FormControl, FormArray } from '@angular/forms'\r\n\r\nexport interface IControls {\r\n    [key: string]: AbstractControl;\r\n}\r\n\r\nexport class LibFormGroup<T extends IControls> extends FormGroup {\r\n    constructor(controls: IControls, validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]) {\r\n        super(controls as {\r\n            [key: string]: AbstractControl;\r\n        }, validatorOrOpts, asyncValidator)\r\n        this.controls = controls as T;\r\n    }\r\n\r\n    controls: T;\r\n\r\n    /**\r\n     * Returns a  list of FormControls that are invalid and enabled within the FormGroup.\r\n     * The FormControls of sub FormGroups and FormArrays are not returned. \r\n     */\r\n    invalidControls(): string[] {\r\n        const invalidControls: string[] = [];\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if (element instanceof FormControl && element.invalid && element.enabled) {\r\n                    invalidControls.push(control);\r\n                }\r\n            }\r\n        }\r\n        return invalidControls;\r\n    }\r\n    /**\r\n     * Returns a list of FormGroups and FormArrays that are invalid and enabled within the FormGroup.\r\n     * The FormGroups and FormArrays of sub FormGroups and FormArrays are not included. \r\n     */\r\n    invalidFormGroups(): string[] {\r\n        const invalidControls: string[] = [];\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if ((element instanceof FormGroup || element instanceof FormArray) && element.invalid && element.enabled) {\r\n                    invalidControls.push(control);\r\n                }\r\n            }\r\n        }\r\n        return invalidControls;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of FormGroups, FormArrays and FormControls that are invalid and enabled within the FormGroup in no particular order.\r\n     * The FormGroups, FormArrays and FormControls of sub FormGroups and FormArrays are not included. \r\n     */\r\n    invalidFormGroupsAndControls() {\r\n        const invalidControls: string[] = [];\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if (element.invalid && element.enabled) {\r\n                    invalidControls.push(control);\r\n                }\r\n            }\r\n        }\r\n        return invalidControls;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of FormControls that are invalid and enabled within the FormGroup in no particular order.\r\n     * The FormControls of sub FormGroups and FormArrays are included.\r\n     */\r\n    allInvalidControls() {\r\n        const invalidControls: string[] = [];\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if (element.invalid && element.enabled) {\r\n                    if (element instanceof LibFormGroup) {\r\n                        const invalid = element.allInvalidControls();\r\n                        invalidControls.push(...invalid);\r\n                    } else {\r\n                        invalidControls.push(control);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return invalidControls;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of FormGroups, FormArrays and FormControls that are invalid and enabled within the FormGroup in no particular order.\r\n     * The FormGroups, FormArrays and FormControls of sub FormGroups and FormArrays are included. \r\n     */\r\n    allInvalidControlsAndGroups() {\r\n        const invalidControls: string[] = [];\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if (element.invalid && element.enabled) {\r\n                    if (element instanceof LibFormGroup) {\r\n                        const invalid = element.allInvalidControls();\r\n                        invalidControls.push(control);\r\n                        invalidControls.push(...invalid);\r\n                    } else {\r\n                        invalidControls.push(control);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return invalidControls;\r\n    }\r\n\r\n    clearAllValidators() {\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if (element.invalid && element.enabled) {\r\n                    if (element instanceof LibFormGroup) {\r\n                        element.clearAllValidators();\r\n                    } else {\r\n                        element.clearValidators();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clearAllValues() {\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if (element.invalid && element.enabled) {\r\n                    if (element instanceof LibFormGroup) {\r\n                        element.clearAllValidators();\r\n                    } else {\r\n                        element.setValue(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clearValuesAndValidators() {\r\n        for (const control in this.controls) {\r\n            if (this.controls.hasOwnProperty(control)) {\r\n                const element = this.controls[control];\r\n                if (element.invalid && element.enabled) {\r\n                    if (element instanceof LibFormGroup) {\r\n                        element.clearValuesAndValidators();\r\n                    } else {\r\n                        element.setValue(null);\r\n                        element.clearValidators();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { OnDestroy, OnInit } from '@angular/core';\r\nimport { LibFormGroup, IControls } from '../reactive/reactive';\r\nimport { ControlContainer } from '@angular/forms';\r\n\r\nexport class ComponentBase<T extends IControls> implements OnInit, OnDestroy{\r\n    subscriptions: Subscription[] = [];\r\n\r\n    form: LibFormGroup<T>;\r\n\r\n    constructor(private controlContainer: ControlContainer) {}\r\n\r\n    ngOnInit() {\r\n        this.form = <LibFormGroup<T>>this.controlContainer.control;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.form.clearValuesAndValidators();\r\n        for (const sub of this.subscriptions) {\r\n            sub.unsubscribe();\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}